// <auto-generated />
using System;
using Cut_Roll_News.Infrastructure.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cut_Roll_News.Infrastructure.Migrations
{
    [DbContext(typeof(NewsDbContext))]
    partial class NewsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cut_Roll_News.Core.Casts.Models.Cast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("CastOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Character")
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("cast", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Common.Models.ExecutedScript", b =>
                {
                    b.Property<string>("ScriptName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ScriptName");

                    b.ToTable("ExecutedScripts");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Countries.Models.Country", b =>
                {
                    b.Property<string>("Iso3166_1")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Iso3166_1");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Crews.Models.Crew", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<string>("Job")
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PersonId");

                    b.ToTable("crew", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Genres.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Keywords.Models.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieGenres.Models.MovieGenre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_genres", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieImages.Models.MovieImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_images", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieKeywords.Models.MovieKeyword", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("movie_keywords", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieOriginCountries.Models.MovieOriginCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("movie_origin_countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieProductionCompanies.Models.MovieProductionCompany", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.HasKey("MovieId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("movie_production_companies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieProductionCountries.Models.MovieProductionCountry", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("movie_production_countries", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieSpokenLanguages.Models.MovieSpokenLanguage", b =>
                {
                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("text");

                    b.HasKey("MovieId", "LanguageCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("movie_spoken_languages", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieVideos.Models.MovieVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_videos", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Movies.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<long?>("Budget")
                        .HasColumnType("bigint");

                    b.Property<string>("Homepage")
                        .HasColumnType("text");

                    b.Property<string>("ImdbId")
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rating")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("Revenue")
                        .HasColumnType("bigint");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer");

                    b.Property<string>("Tagline")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("VoteAverage")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsArticles.Models.NewsArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LikesCount")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("NewsArticles");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsLikes.Models.NewsLike", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("NewsArticleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "NewsArticleId");

                    b.HasIndex("NewsArticleId");

                    b.ToTable("NewsLikes");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsReferences.Models.NewsReference", b =>
                {
                    b.Property<Guid>("NewsArticleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReferencedId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferencedUrl")
                        .HasColumnType("text");

                    b.HasKey("NewsArticleId", "ReferencedId");

                    b.ToTable("NewsReferences");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.People.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("people", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("CountryCode")
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("production_companies", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.SpokenLanguages.Models.SpokenLanguage", b =>
                {
                    b.Property<string>("Iso639_1")
                        .HasColumnType("text");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Iso639_1");

                    b.ToTable("spoken_languages", (string)null);
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Users.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Casts.Models.Cast", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.People.Models.Person", "Person")
                        .WithMany("CastRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Crews.Models.Crew", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.People.Models.Person", "Person")
                        .WithMany("CrewRoles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieGenres.Models.MovieGenre", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Genres.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieImages.Models.MovieImage", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Images")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieKeywords.Models.MovieKeyword", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Keywords.Models.Keyword", "Keyword")
                        .WithMany("MovieKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Keywords")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieOriginCountries.Models.MovieOriginCountry", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Countries.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("OriginCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieProductionCompanies.Models.MovieProductionCompany", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.ProductionCompanies.Models.ProductionCompany", "Company")
                        .WithMany("MovieProductionCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ProductionCompanies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieProductionCountries.Models.MovieProductionCountry", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Countries.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("ProductionCountries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieSpokenLanguages.Models.MovieSpokenLanguage", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.SpokenLanguages.Models.SpokenLanguage", "Language")
                        .WithMany("MovieSpokenLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("SpokenLanguages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.MovieVideos.Models.MovieVideo", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Movies.Models.Movie", "Movie")
                        .WithMany("Videos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsArticles.Models.NewsArticle", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Users.Models.User", "Author")
                        .WithMany("NewsArticles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsLikes.Models.NewsLike", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.NewsArticles.Models.NewsArticle", "NewsArticle")
                        .WithMany("NewsLikes")
                        .HasForeignKey("NewsArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsArticle");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsReferences.Models.NewsReference", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.NewsArticles.Models.NewsArticle", "NewsArticle")
                        .WithMany("NewsReferences")
                        .HasForeignKey("NewsArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsArticle");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.HasOne("Cut_Roll_News.Core.Countries.Models.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Countries.Models.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Genres.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Keywords.Models.Keyword", b =>
                {
                    b.Navigation("MovieKeywords");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Movies.Models.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("Images");

                    b.Navigation("Keywords");

                    b.Navigation("MovieGenres");

                    b.Navigation("OriginCountries");

                    b.Navigation("ProductionCompanies");

                    b.Navigation("ProductionCountries");

                    b.Navigation("SpokenLanguages");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.NewsArticles.Models.NewsArticle", b =>
                {
                    b.Navigation("NewsLikes");

                    b.Navigation("NewsReferences");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.People.Models.Person", b =>
                {
                    b.Navigation("CastRoles");

                    b.Navigation("CrewRoles");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.ProductionCompanies.Models.ProductionCompany", b =>
                {
                    b.Navigation("MovieProductionCompanies");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.SpokenLanguages.Models.SpokenLanguage", b =>
                {
                    b.Navigation("MovieSpokenLanguages");
                });

            modelBuilder.Entity("Cut_Roll_News.Core.Users.Models.User", b =>
                {
                    b.Navigation("NewsArticles");
                });
#pragma warning restore 612, 618
        }
    }
}
